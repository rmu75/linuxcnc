// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EMCCOMMON_EMC_H_
#define FLATBUFFERS_GENERATED_EMCCOMMON_EMC_H_

#include "flatbuffers/flatbuffers.h"

namespace EMC {

struct Pose;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Pose FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;
  double a_;
  double b_;
  double c_;
  double u_;
  double v_;
  double w_;

 public:
  Pose()
      : x_(0),
        y_(0),
        z_(0),
        a_(0),
        b_(0),
        c_(0),
        u_(0),
        v_(0),
        w_(0) {
  }
  Pose(double _x, double _y, double _z, double _a, double _b, double _c, double _u, double _v, double _w)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)),
        a_(flatbuffers::EndianScalar(_a)),
        b_(flatbuffers::EndianScalar(_b)),
        c_(flatbuffers::EndianScalar(_c)),
        u_(flatbuffers::EndianScalar(_u)),
        v_(flatbuffers::EndianScalar(_v)),
        w_(flatbuffers::EndianScalar(_w)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
  double a() const {
    return flatbuffers::EndianScalar(a_);
  }
  double b() const {
    return flatbuffers::EndianScalar(b_);
  }
  double c() const {
    return flatbuffers::EndianScalar(c_);
  }
  double u() const {
    return flatbuffers::EndianScalar(u_);
  }
  double v() const {
    return flatbuffers::EndianScalar(v_);
  }
  double w() const {
    return flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(Pose, 72);

}  // namespace EMC

#endif  // FLATBUFFERS_GENERATED_EMCCOMMON_EMC_H_
